package com.marc_val_96.advancedworldgenerator;

import com.marc_val_96.advancedworldgenerator.configuration.BiomeConfig;
import com.marc_val_96.advancedworldgenerator.configuration.BiomeLoadInstruction;
import com.marc_val_96.advancedworldgenerator.configuration.ConfigProvider;
import com.marc_val_96.advancedworldgenerator.customobjects.CustomObjectStructureCache;
import com.marc_val_96.advancedworldgenerator.exception.BiomeNotFoundException;
import com.marc_val_96.advancedworldgenerator.generator.SpawnableObject;
import com.marc_val_96.advancedworldgenerator.generator.biome.BiomeGenerator;
import com.marc_val_96.advancedworldgenerator.util.ChunkCoordinate;
import com.marc_val_96.advancedworldgenerator.util.NamedBinaryTag;
import com.marc_val_96.advancedworldgenerator.util.minecraftTypes.MobNames;
import com.marc_val_96.advancedworldgenerator.util.minecraftTypes.TreeType;

import java.util.Collection;
import java.util.Random;

public interface LocalWorld {


    LocalBiome createBiomeFor(BiomeConfig biomeConfig, BiomeIds requestedBiomeIds);

    /**
     * Gets how many different biome ids are in the world.
     *
     * @return How many different biome ids are in the world.
     */
    int getMaxBiomesCount();

    int getFreeBiomeId();

    LocalBiome getBiomeById(int id) throws BiomeNotFoundException;

    LocalBiome getBiomeByIdOrNull(int id);

    LocalBiome getBiomeByName(String name) throws BiomeNotFoundException;

    Collection<? extends BiomeLoadInstruction> getDefaultBiomes();

    // Biome manager

    /**
     * Gets the biome generator.
     *
     * @return The biome generator.
     */
    BiomeGenerator getBiomeGenerator();

    /**
     * Calculates the biome at the given coordinates. This is usually taken
     * from the biome generator, but this can be changed using the
     * configuration files. In that case it is read from the chunk data.
     *
     * @param x The block x.
     * @param z The block z.
     * @return The biome at the given coordinates.
     * @throws BiomeNotFoundException If the biome id is invalid.
     * @see #getCalculatedBiome(int, int) to always use the biome generator.
     * @see #getSavedBiome(int, int) to always use the chunk data.
     */
    LocalBiome getBiome(int x, int z) throws BiomeNotFoundException;

    /**
     * Gets the (stored) biome at the given coordinates.
     *
     * @param x The block x.
     * @param z The block z.
     * @return The biome at the given coordinates.
     * @throws BiomeNotFoundException If the saved biome id is invalid.
     */
    LocalBiome getSavedBiome(int x, int z) throws BiomeNotFoundException;

    /**
     * Gets the biome as generated by the biome generator.
     *
     * @param x The block x.
     * @param z The block z.
     * @return The biome.
     */
    LocalBiome getCalculatedBiome(int x, int z);

    // Default generators

    /**
     * Performs planning for the layout of the default Minecraft structures.
     *
     * @param chunkX Chunk x.
     * @param chunkZ Chunk z.
     * @param dry    Whether there is water in this chunk. Structures like villages will not spawn in that case.
     */
    void prepareDefaultStructures(int chunkX, int chunkZ, boolean dry);

    /**
     * Places a dungeon at the given location.
     *
     * @param rand Random number generator.
     * @param x    Block x.
     * @param y    Block y.
     * @param z    Block z.
     */
    void placeDungeon(Random rand, int x, int y, int z);

    /**
     * Places a random fossil somewhere in the given chunk. Unfortunately, the position of the fossil in the chunk
     * is fixed; it does not depend on the passed {@code rand} instance.
     *
     * @param rand       The random number generator.
     * @param chunkCoord The chunk.
     */
    void placeFossil(Random rand, ChunkCoordinate chunkCoord);

    /**
     * Grows a tree at the given location.
     *
     * @param type The tree.
     * @param rand Random number generator.
     * @param x    Block x.
     * @param y    Block y.
     * @param z    Block z.
     * @return Whether the tree successfully spawned.
     */
    boolean placeTree(TreeType type, Random rand, int x, int y, int z);

    /**
     * Places the default Minecraft structures (strongholds, villages, etc.) in this chunk.
     *
     * @param rand       Random number generator.
     * @param chunkCoord The chunk.
     * @return True when successful.
     * @see #prepareDefaultStructures(int, int, boolean)
     */
    boolean placeDefaultStructures(Random rand, ChunkCoordinate chunkCoord);

    /**
     * Gets a structure part in Mojang's structure format.
     *
     * @param name Full name of the structure.
     * @return The structure, or null if it does not exist.
     */
    SpawnableObject getMojangStructurePart(String name);

    /**
     * Executes ReplacedBlocks.
     *
     * <p>
     * During terrain population, four chunks are guaranteed to be loaded:
     * (chunkX, chunkZ), (chunkX + 1, chunkZ), (chunkX, chunkZ + 1) and
     * (chunkX + 1, chunkZ + 1). All populators use an 8-block offset from the
     * top left chunk, and populate an area of 16x16 blocks from there. This
     * allows them to extend 8 blocks from their population area without
     * hitting potentially unloaded chunks.
     *
     * <p>
     * Populators may place blocks in already populated chunks, which would
     * cause those blocks to be never replaced. ReplacedBlocks uses the same
     * 8-block offset to minimize this risk.
     *
     * @param chunkCoord The top left chunk for ReplacedBlocks.
     * @see ChunkCoordinate#getPopulatingChunk(int, int) Explanation about the
     * population offset.
     */
    void replaceBlocks(ChunkCoordinate chunkCoord);

    /**
     * Since Minecraft Beta 1.8, friendly mobs are mainly spawned during the
     * terrain generation. Calling this method will place the mobs.
     *
     * @param biome      Biome to place the mobs of.
     * @param random     Random number generator.
     * @param chunkCoord The chunk to spawn the mobs in.
     */
    void placePopulationMobs(LocalBiome biome, Random random, ChunkCoordinate chunkCoord);

    // Population start and end

    /**
     * Marks the given chunks as being populated. No new chunks may be created. Implementations may cache the chunk.
     *
     * @param chunkCoord The chunk being populated.
     * @throws IllegalStateException If another chunks is being populated. Call {@link #endPopulation()} first.
     * @see #endPopulation()
     */
    void startPopulation(ChunkCoordinate chunkCoord);

    /**
     * Stops the population step. New chunks may be created again. Implementations may cache the chunk.
     *
     * @throws IllegalStateException If no chunk was being populated.
     * @see #startPopulation(ChunkCoordinate)
     */
    void endPopulation();

    // Blocks

    /**
     * Gets the material at the given location.
     *
     * @param x Block x.
     * @param y Block y.
     * @param z Block z.
     * @return The material.
     */
    LocalMaterialData getMaterial(int x, int y, int z);

    /**
     * Gets whether there is air at the given location.
     *
     * @param x Block x.
     * @param y Block y.
     * @param z Block z.
     * @return True if there is air, false otherwise.
     */
    boolean isEmpty(int x, int y, int z);

    /**
     * Sets the block at the given position.
     *
     * @param x        Block x.
     * @param y        Block y.
     * @param z        Block z.
     * @param material The material.
     */
    void setBlock(int x, int y, int z, LocalMaterialData material);

    /**
     * Sets the block at the given position.
     *
     * @param x          Block x.
     * @param y          Block y.
     * @param z          Block z.
     * @param material   The material.
     * @param metaOrNull Extra NBT data for the block. The "id", "x", "y" and "z" tags are automatically overwritten. May be null to not attach any metadata.
     */
    void setBlock(int x, int y, int z, LocalMaterialData material, NamedBinaryTag metaOrNull);

    /**
     * Gets the NBT data associated with the given block.
     *
     * @param x Block x.
     * @param y Block y.
     * @param z Block z.
     * @return The NBT data.
     */
    @SuppressWarnings("UnusedDeclaration")
    NamedBinaryTag getMetadata(int x, int y, int z);

    /**
     * Gets the sea/lake/whatever level at the given position.
     *
     * @param x Block x.
     * @param z Block z.
     * @return The liquid level.
     */
    int getLiquidHeight(int x, int z);

    /**
     * Returns the block above the highest solid block.
     *
     * @param x Block x.
     * @param z Block z.
     * @return The y location of the block above the highest solid block.
     */
    int getSolidHeight(int x, int z);

    /**
     * Returns the block above the highest block.
     *
     * @param x Block x.
     * @param z Block z.
     * @return The y location of the block above the highest block.
     */
    int getHighestBlockYAt(int x, int z);

    /**
     * Gets the light level (0 to 15, inclusive) of the given block.
     *
     * @param x Block x.
     * @param y Block y.
     * @param z Block z.
     * @return The light level.
     */
    int getLightLevel(int x, int y, int z);

    /**
     * Gets whether the terrain at the given position is loaded into memory.
     *
     * @param x Block x.
     * @param y Block y.
     * @param z Block z.
     * @return True if the terrain is loaded into memory, false otherwise.
     */
    boolean isLoaded(int x, int y, int z);

    // Other information

    /**
     * Gets the configuration objects of this world.
     *
     * @return The configuration objects.
     */
    ConfigProvider getConfigs();

    /**
     * Gets a cache of all generated structures for a chunk.
     *
     * @return The cache.
     */
    CustomObjectStructureCache getStructureCache();

    /**
     * Gets the name of the world. The world is saved in a folder with this name.
     *
     * @return The name.
     */
    String getName();

    /**
     * Gets the seed of the world. The seed is used for the random number generator.
     *
     * @return The seed.
     */
    long getSeed();

    /**
     * Gets the height the base terrain of the world is capped at. Resources
     * ignore this limit.
     *
     * @return The height the base terrain of the world is capped at.
     */
    int getHeightCap();

    /**
     * Returns the vertical scale of the world. 128 blocks is the normal
     * scale, 256 doubles the scale, 64 halves the scale, etc. Only powers of
     * two will be returned.
     *
     * @return The vertical scale of the world.
     */
    int getHeightScale();

    /**
     * Spawns an entity in the world.
     *
     * @param id         Name of the entity, like "cow". All names in {@link MobNames} (including aliases) are guaranteed to
     *                   be valid, but other (mod-provided) entity names may also be valid.
     * @param x          Block x.
     * @param y          Block y of the feet of the entity.
     * @param z          Block z.
     * @param amount     Amount of mobs to spawn.
     * @param metaOrNull Extra meta information for the entity. Position, rotation and id will be ignored.
     */
    void spawnEntity(String id, float x, float y, float z, int amount, NamedBinaryTag metaOrNull);

    public int getHighestBlockAboveYAt(int x, int z, ChunkCoordinate chunkBeingPopulated);
}
